class Solution {
public:
class MyCompare {
public:
	bool operator()(pair<int, int>& m,pair<int, int>& n) {
		return m.second > n.second;
	}
};
    vector<int> topKFrequent(vector<int>& nums, int k) {
        unordered_map<int, int> map;
        for(int i=0;i<nums.size();i++){
            map[nums[i]]++;
        }
        priority_queue<pair<int, int>, vector<pair<int, int>>,MyCompare> qu;
        for (unordered_map<int, int>::iterator it = map.begin(); it != map.end(); it++) {
            qu.push(*it);
            if(qu.size()>k){
                qu.pop();
            }
        }
        vector<int> result(k);
        for(int i=k-1;i>=0;i--){
            result[i]=qu.top().first;
            qu.pop();
        }
        return result;
    }
};
